name: build-wheels

on:
  # Do this when a new release is published
  push:
    branches: [ main, ci ]
  pull_request:
  release:
    types: [ published ]

jobs:
  # Build for manylinux, which allows it to be run on many different Linux platforms
  test-linux:
    strategy:
      matrix:
        py-version: ['3.9', '3.10', '3.11', '3.12']
    runs-on: ubuntu-latest
    steps:
    - name: Checkout opaquepy
      uses: actions/checkout@v3
    - run: cd opaquepy
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.py-version }}
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        # .venv is created in project
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Install dependencies
      run: poetry install --no-interaction --no-root
      working-directory: ${{ github.workspace }}/opaquepy
    - name: Install library
      run: poetry install --no-interaction
      working-directory: ${{ github.workspace }}/opaquepy
    - name: maturin develop
      run: poetry run maturin develop
      working-directory: ${{ github.workspace }}/opaquepy
    - name: poetry pytest
      run: poetry run pytest
      working-directory: ${{ github.workspace }}/opaquepy

  build-macos:
    if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
    needs: [ test-linux ]
    runs-on: macos-latest
    strategy:
      matrix:
        py-version: [ '3.9', '3.10', '3.11', '3.12' ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py-version }}
      # The x86_64 Rust toolchain is installed on GitHub runners, but since we compile also for Apple Silicon, we also
      # need the correct Rust toolchain.
      - name: Rustup install aarch64 target
        run: rustup target add aarch64-apple-darwin
        if: ${{ matrix.target == '--universal2' }}
      - name: Build wheels - universal2
        uses: PyO3/maturin-action@v1
        with:
          target: universal2-apple-darwin
          args: --release --out dist -i ${{ matrix.py-version }}
          working-directory: ${{ github.repository }}/opaquepy
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ${{ github.repository }}/opaquepy/dist

  build-windows:
    if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
    needs: [ test-linux ]
    runs-on: windows-latest
    strategy:
      matrix:
        py-version: ['3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py-version }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: x64
          args: --release --out dist -i ${{ matrix.py-version }}
          working-directory: ${{ github.repository }}/opaquepy
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ${{ github.repository }}/opaquepy/dist

  build-linux:
    if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
    needs: [ test-linux ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        py-version: [ '3.9', '3.10', '3.11', '3.12' ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py-version }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          rust-toolchain: stable
          target: x86_64
          manylinux: auto
          args: --release --out dist -i ${{ matrix.py-version }}
          working-directory: ${{ github.repository }}/opaquepy
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ${{ github.repository }}/opaquepy/dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [ build-macos, build-windows, build-linux ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Publish to PyPI
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --skip-existing *