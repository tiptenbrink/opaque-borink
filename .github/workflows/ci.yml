name: build-wheels

on:
  # Do this when a new release is published
  push:
    branches: [ main, ci ]
  pull_request:
  release:
    types: [ published ]

jobs:
  # Build for manylinux, which allows it to be run on many different Linux platforms
  test-linux:
    strategy:
      matrix:
        py-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    runs-on: ubuntu-latest
    steps:
    - uses: taiki-e/install-action@v2
      with:
        tool: maturin@1.8.1
    - name: Checkout opaquepy
      uses: actions/checkout@v3
    - run: cd opaquepy
    - name: Install the latest version of uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "0.5.5"
        python-version: ${{ matrix.py-version }}
    - name: Install dependencies
      run: uv sync --no-install-project --locked
      working-directory: ${{ github.workspace }}/opaquepy
    - name: Maturin develop
      run: maturin develop --uv
      working-directory: ${{ github.workspace }}/opaquepy
    - name: pytest
      run: uv run pytest
      working-directory: ${{ github.workspace }}/opaquepy

  build-macos:
    if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
    needs: [ test-linux ]
    runs-on: macos-latest
    strategy:
      matrix:
        py-version: [ '3.9', '3.10', '3.11', '3.12', '3.13' ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py-version }}
      # The x86_64 Rust toolchain is installed on GitHub runners, but since we compile also for Apple Silicon, we also
      # need the correct Rust toolchain.
      - name: Rustup install aarch64 target
        run: rustup target add aarch64-apple-darwin
      - name: Build wheels - universal2
        uses: PyO3/maturin-action@v1
        with:
          target: universal2-apple-darwin
          args: --release --out dist -i ${{ matrix.py-version }}
          working-directory: opaquepy
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ${{ github.workspace }}/opaquepy/dist

  build-windows:
    if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
    needs: [ test-linux ]
    runs-on: windows-latest
    strategy:
      matrix:
        py-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py-version }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: x64
          args: --release --out dist -i ${{ matrix.py-version }}
          working-directory: opaquepy
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ${{ github.workspace }}/opaquepy/dist

  build-linux:
    if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
    needs: [ test-linux ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        py-version: [ '3.9', '3.10', '3.11', '3.12', '3.13' ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py-version }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          rust-toolchain: stable
          target: x86_64
          manylinux: auto
          args: --release --out dist -i ${{ matrix.py-version }}
          working-directory: opaquepy
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ${{ github.workspace }}/opaquepy/dist

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [ build-macos, build-windows, build-linux ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Publish to PyPI
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --skip-existing *